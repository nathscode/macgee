
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum RoleType {
    CLIENT
    MANAGER
    SALES
    ADMIN
}

enum ProductType {
    PART
    TRUCK
}
enum StatusType {
    PENDING
    PROCESSING
    DENIED
    COMPLETED
}

enum InventoryLogType {
PURCHASE
SALE
ADJUSTMENT
}

enum PaymentMethod {
    PROCESSOR
    TRANSFER
    POS
    CASH
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  REFUNDED
  FAILED
  SUCCESS
}

enum OrderStatus {
  PENDING 
  COMPLETED
  CANCELLED
  REFUNDED
}

model User {
    id                 String     @id @unique @default(cuid())
    name               String?    @db.VarChar(255)
    username           String?    @unique @db.VarChar(255)
    email              String?    @unique @db.VarChar(255)
    phone              String?
    password           String?
    verified           Boolean?   @default(false)
    verificationCode   String?    @unique @db.VarChar(6)
    emailVerified      DateTime?
    avatar             String?
    role               RoleType?  @default(CLIENT)
    createdAt          DateTime   @default(now())
    updatedAt          DateTime   @updatedAt
    passwordResetToken String?
    passwordResetAt    DateTime?
    products      Product[]
    orders        Order[]
    inventoryLogs InventoryLog[]
    accounts           Account[]
    sessions           Session[]


    @@unique([email, username, verificationCode, passwordResetToken])
    @@index([email, username, verificationCode, passwordResetToken])
    @@map("users")
}

model Account {
    id                String   @id @default(cuid())
    userId            String   @map("user_id")
    type              String?
    provider          String
    providerAccountId String   @map("provider_account_id")
    token_type        String?
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    scope             String?
    id_token          String?  @db.Text
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    userId       String?  @map("user_id")
    sessionToken String   @unique @map("session_token") @db.Text
    accessToken  String?  @map("access_token") @db.Text
    expires      DateTime
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    @@map("sessions")
}

model PasswordReset {
    id         String   @id @default(cuid())
    email      String?  @db.VarChar(255)
    code       String?  @db.VarChar(255)
    expiredAt  DateTime?
    createdAt  DateTime @default(now())

    @@unique([id])
    @@map("PasswordResets")
}

model Product {
  id              String         @id @default(cuid())
  user       User                   @relation(fields: [userId], references: [id])
  userId          String
  sku             String         @unique // Stock Keeping Unit
  title           String         @db.VarChar(255)
  slug            String         @unique @db.VarChar(255)
  description     String?        @db.Text
  category       String?        @db.VarChar(255)
  productType     ProductType    @default(TRUCK)
  
  // Pricing
  price         Decimal        @default(0.00) @db.Decimal(20,2)
  discountPrice Decimal        @default(0.00) @db.Decimal(20,2)
  
  // Inventory
  currentStock    Int            @default(0)
  minimumStock    Int            @default(0)
  
  // Equipment specific fields
  manufacturer    String?        @db.VarChar(255)
  model           String?        @db.VarChar(255)
  engineNumber    String?        @db.VarChar(255)
  year            String?        @db.VarChar(4)
  condition       String?        @db.VarChar(100)
  hours           Int?
  isBucket        Boolean        @default(false)
  isExterior        Boolean        @default(false)
  isRops        Boolean        @default(false)
  specifications  Json?          // Flexible specifications storage
  
  // Status
  isActive        Boolean        @default(true)
  isFeatured      Boolean        @default(false)
  
  // Relations
  medias          Media[]
  orderItems      OrderItem[]    // Link to orders
  inventoryLogs   InventoryLog[] // Track stock changes
  quotes   Quote[] // Track stock changes
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@map("products")
}

model Media {
    id         String   @id @default(cuid())
    url        String?  @db.VarChar(5000)
    product   Product @relation(fields: [productId], references: [id], onDelete:Cascade)
    productId String
    createdAt  DateTime @default(now())

    @@unique([productId, id])
    @@map("medias")
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique // Sequential order number
  date            DateTime      @default(now())
  
  // Amounts
  subtotal        Decimal       @default(0.00) @db.Decimal(20,2)
  taxAmount       Decimal       @default(0.00) @db.Decimal(20,2)
  discountAmount  Decimal       @default(0.00) @db.Decimal(20,2)
  totalAmount     Decimal       @default(0.00) @db.Decimal(20,2)
  
  // Status
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  
  // Relations
  customer        Customer?     @relation(fields: [customerId], references: [id])
  customerId      String?
  orderItems      OrderItem[]
  payments        Payment[]
  
  // Metadata
  notes           String?       @db.Text
  createdBy       User         @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([customerId, date])
  @@map("orders")
}

model OrderItem {
  id          String    @id @default(cuid())
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String
  product     Product   @relation(fields: [productId], references: [id], onDelete: NoAction)
  productId   String
  quantity    Int
  unitPrice   Decimal   @db.Decimal(20,2)
  discount    Decimal   @default(0.00) @db.Decimal(20,2)
  totalPrice  Decimal   @db.Decimal(20,2)
  
  @@unique([orderId, productId])
  @@map("order_items")
}

model Payment {
  id            String         @id @default(cuid())
  order         Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId       String
  amount        Decimal        @db.Decimal(20,2)
  method        PaymentMethod
  status        PaymentStatus  @default(PENDING)
  reference     String?        // Payment reference number
  notes         String?        @db.Text
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@map("payments")
}


model Quote {
  id          String    @id @default(cuid())
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  referenceCode   String @db.VarChar(8)
  name          String
  email         String
  message     String?        @db.Text
  status        StatusType  @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Customer {
  id            String    @id @default(cuid())
  code          String    @unique // Customer reference code
  name          String
  email         String?   @unique
  phone         String?
  address       String?   @db.Text
  
  // Business fields
  taxId         String?   
  businessName  String?   
  
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("customers")
}

model InventoryLog {
  id          String    @id @default(cuid())
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int       // Can be positive (in) or negative (out)
  type        InventoryLogType @default(PURCHASE) 
  reference   String?   // Reference to order or purchase
  notes       String?   @db.Text
  createdBy   User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
  
  @@map("inventory_logs")
}
